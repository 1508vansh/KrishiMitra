import React, { useState } from 'react';
import { useSelector } from 'react-redux';

const CropRecommendation = () => {
  const { language } = useSelector(state => state.auth);
  const [recommendationData, setRecommendationData] = useState({
    soilType: '',
    season: '',
    waterAvailability: '',
    landSize: ''
  });
  const [recommendations, setRecommendations] = useState([]);

  const getText = (english, malayalam, hindi) => {
    if (language === 'malayalam') return malayalam;
    if (language === 'hindi') return hindi;
    return english;
  };

  const soilTypes = [
    { value: 'clay', label: getText('Clay', 'เดเตเดณเดฟ', 'เคเคฟเคเคจเฅ เคฎเคฟเคเฅเคเฅ') },
    { value: 'sandy', label: getText('Sandy', 'เดฎเดฃเตฝ', 'เคฌเคฒเฅเค เคฎเคฟเคเฅเคเฅ') },
    { value: 'loamy', label: getText('Loamy', 'เดเดเตเดเตฝ', 'เคฆเฅเคฎเค เคฎเคฟเคเฅเคเฅ') },
    { value: 'black', label: getText('Black Soil', 'เดเดฑเตเดคเตเดค เดฎเดฃเตเดฃเต', 'เคเคพเคฒเฅ เคฎเคฟเคเฅเคเฅ') }
  ];

  const seasons = [
    { value: 'kharif', label: getText('Kharif (Jun-Sep)', 'เดเดฐเดฟเดซเต (เดเตเตบ-เดธเตเดชเตเดฑเตเดฑเดเดฌเตผ)', 'เคเคฐเฅเคซ (เคเฅเคจ-เคธเคฟเคคเคเคฌเคฐ)') },
    { value: 'rabi', label: getText('Rabi (Oct-Mar)', 'เดฑเดฌเดฟ (เดเดเตเดเตเดฌเตผ-เดฎเดพเตผเดเตเดเต)', 'เคฐเคฌเฅ (เคเคเฅเคเฅเคฌเคฐ-เคฎเคพเคฐเฅเค)') },
    { value: 'zaid', label: getText('Zaid (Apr-Jun)', 'เดธเตเดฆเต (เดเดชเตเดฐเดฟเตฝ-เดเตเตบ)', 'เคเคพเคฏเคฆ (เคเคชเฅเคฐเฅเคฒ-เคเฅเคจ)') }
  ];

  const cropData = {
    rice: {
      name: getText('Rice', 'เดจเตเดฒเตเดฒเต', 'เคงเคพเคจ'),
      suitability: getText('High yield in clay soil with good water', 'เดเตเดณเดฟ เดฎเดฃเตเดฃเดฟเตฝ เดจเดฒเตเดฒ เดตเดฟเดณเดตเต', 'เคเคฟเคเคจเฅ เคฎเคฟเคเฅเคเฅ เคฎเฅเค เคเคเฅเคเฅ เคชเฅเคฆเคพเคตเคพเคฐ'),
      season: ['kharif'],
      profit: getText('High', 'เดเดฏเตผเดจเตเดจ', 'เคเคเฅเค')
    },
    coconut: {
      name: getText('Coconut', 'เดคเตเดเตเดเต', 'เคจเคพเคฐเคฟเคฏเคฒ'),
      suitability: getText('Coastal areas, sandy soil', 'เดคเตเดฐเดฆเตเดถเดเตเดเตพ, เดฎเดฃเตฝ เดฎเดฃเตเดฃเต', 'เคคเคเฅเคฏ เคเฅเคทเฅเคคเฅเคฐ, เคฌเคฒเฅเค เคฎเคฟเคเฅเคเฅ'),
      season: ['kharif', 'rabi'],
      profit: getText('Medium', 'เดเดเดคเตเดคเดฐเด', 'เคฎเคงเฅเคฏเคฎ')
    },
    banana: {
      name: getText('Banana', 'เดตเดพเดด', 'เคเฅเคฒเคพ'),
      suitability: getText('Warm climate, well-drained soil', 'เดเตเดเตเดณเตเดณ เดเดพเดฒเดพเดตเดธเตเดฅ, เดจเดจเดตเตเดณเตเดณ เดฎเดฃเตเดฃเต', 'เคเคฐเฅเคฎ เคเคฒเคตเคพเคฏเฅ, เคเคเฅเคเฅ เคเคฒ เคจเคฟเคเคพเคธเฅ'),
      season: ['kharif'],
      profit: getText('High', 'เดเดฏเตผเดจเตเดจ', 'เคเคเฅเค')
    },
    vegetables: {
      name: getText('Vegetables', 'เดชเดเตเดเดเตเดเดฑเดฟเดเตพ', 'เคธเคฌเฅเคเคฟเคฏเคพเค'),
      suitability: getText('All soil types, regular water', 'เดเดฒเตเดฒเดพ เดฎเดฃเตเดฃเดฟเดฒเตเด, เดจเดฟเดฐเดจเตเดคเดฐเดฎเดพเดฏ เดเดฒเด', 'เคธเคญเฅ เคฎเคฟเคเฅเคเฅ, เคจเคฟเคฏเคฎเคฟเคค เคชเคพเคจเฅ'),
      season: ['rabi', 'zaid'],
      profit: getText('Medium', 'เดเดเดคเตเดคเดฐเด', 'เคฎเคงเฅเคฏเคฎ')
    }
  };

  const getRecommendations = () => {
    // Mock recommendation logic
    const recommendedCrops = Object.keys(cropData).filter(crop => 
      cropData[crop].season.includes(recommendationData.season)
    );
    
    setRecommendations(recommendedCrops.map(crop => cropData[crop]));
  };

  return (
    <div className="bg-white rounded-lg shadow-md p-4 sm:p-6">
      <h3 className="text-lg sm:text-xl font-bold text-gray-800 mb-4 flex items-center">
        ๐ฑ {getText('Crop Recommendation', 'เดตเดฟเดณ เดถเตเดชเดพเตผเดถ', 'เคซเคธเคฒ เคธเคฟเคซเคพเคฐเคฟเคถ')}
      </h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-6">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            {getText('Soil Type', 'เดฎเดฃเตเดฃเต เดคเดฐเด', 'เคฎเคฟเคเฅเคเฅ เคเคพ เคชเฅเคฐเคเคพเคฐ')}
          </label>
          <select 
            className="w-full p-3 border border-gray-300 rounded-lg"
            value={recommendationData.soilType}
            onChange={(e) => setRecommendationData({...recommendationData, soilType: e.target.value})}
          >
            <option value="">{getText('Select Soil Type', 'เดฎเดฃเตเดฃเต เดคเดฐเด เดคเดฟเดฐเดเตเดเตเดเตเดเตเดเตเด', 'เคฎเคฟเคเฅเคเฅ เคเคพ เคชเฅเคฐเคเคพเคฐ เคเฅเคจเฅเค')}</option>
            {soilTypes.map(soil => (
              <option key={soil.value} value={soil.value}>{soil.label}</option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            {getText('Season', 'เดธเตเดธเตบ', 'เคฎเฅเคธเคฎ')}
          </label>
          <select 
            className="w-full p-3 border border-gray-300 rounded-lg"
            value={recommendationData.season}
            onChange={(e) => setRecommendationData({...recommendationData, season: e.target.value})}
          >
            <option value="">{getText('Select Season', 'เดธเตเดธเตบ เดคเดฟเดฐเดเตเดเตเดเตเดเตเดเตเด', 'เคฎเฅเคธเคฎ เคเฅเคจเฅเค')}</option>
            {seasons.map(season => (
              <option key={season.value} value={season.value}>{season.label}</option>
            ))}
          </select>
        </div>
      </div>

      <button 
        onClick={getRecommendations}
        className="w-full bg-green-600 text-white py-3 rounded-lg font-bold hover:bg-green-700 transition"
      >
        {getText('Get Recommendations', 'เดถเตเดชเดพเตผเดถเดเตพ เดจเตเดเตเด', 'เคธเคฟเคซเคพเคฐเคฟเคถเฅเค เคชเฅเคฐเคพเคชเฅเคค เคเคฐเฅเค')}
      </button>

      {recommendations.length > 0 && (
        <div className="mt-6 space-y-4">
          <h4 className="font-bold text-gray-800">
            {getText('Recommended Crops', 'เดถเตเดชเดพเตผเดถ เดเตเดฏเตเดฏเตเดจเตเดจ เดตเดฟเดณเดเตพ', 'เคธเฅเคเคพเค เคเค เคซเคธเคฒเฅเค')}
          </h4>
          {recommendations.map((crop, index) => (
            <div key={index} className="p-4 border-l-4 border-green-500 bg-green-50 rounded-lg">
              <div className="flex justify-between items-start">
                <div>
                  <h5 className="font-bold text-lg">{crop.name}</h5>
                  <p className="text-sm text-gray-600 mt-1">{crop.suitability}</p>
                </div>
                <span className={`px-3 py-1 rounded-full text-xs font-bold ${
                  crop.profit === getText('High', 'เดเดฏเตผเดจเตเดจ', 'เคเคเฅเค') 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-blue-100 text-blue-800'
                }`}>
                  {crop.profit} {getText('Profit', 'เดฒเดพเดญเด', 'เคฒเคพเคญ')}
                </span>
              </div>
            </div>
          ))}
        </div>
      )}

      <div className="mt-6 p-4 bg-blue-50 rounded-lg">
        <h5 className="font-bold text-blue-800 mb-2">
          ๐ก {getText('Expert Tip', 'เดตเดฟเดฆเดเตเดง เดเดฟเดชเตเดชเต', 'เคตเคฟเคถเฅเคทเคเฅเค เคธเคฒเคพเคน')}
        </h5>
        <p className="text-sm text-blue-700">
          {getText(
            'Consult local agriculture officer for personalized advice based on soil test results.',
            'เดฎเดฃเตเดฃเต เดชเดฐเดฟเดถเตเดงเดจ เดซเดฒเดเตเดเดณเต เดเดเดฟเดธเตเดฅเดพเดจเดฎเดพเดเตเดเดฟ เดตเตเดฏเดเตเดคเดฟเดเดค เดเดชเดฆเตเดถเดคเตเดคเดฟเดจเต เดชเตเดฐเดพเดฆเตเดถเดฟเด เดเตเดทเดฟ เดเดฆเตเดฏเตเดเดธเตเดฅเดจเต เดธเดฎเตเดชเดฟเดเตเดเตเด.',
            'เคฎเคฟเคเฅเคเฅ เคชเคฐเฅเคเฅเคทเคฃ เคชเคฐเคฟเคฃเคพเคฎเฅเค เคเฅ เคเคงเคพเคฐ เคชเคฐ เคตเฅเคฏเคเฅเคคเคฟเคเคค เคธเคฒเคพเคน เคเฅ เคฒเคฟเค เคธเฅเคฅเคพเคจเฅเคฏ เคเฅเคทเคฟ เคเคงเคฟเคเคพเคฐเฅ เคธเฅ เคชเคฐเคพเคฎเคฐเฅเคถ เคเคฐเฅเคเฅค'
          )}
        </p>
      </div>
    </div>
  );
};

export default CropRecommendation;