import React, { useState } from 'react';
import { useSelector } from 'react-redux';
import AdvisoryCard from './AdvisoryCard';
import ActivityCard from './ActivityCard';
import LogActivityModal from './LogActivityModal';
import PestReportModal from './PestReportModal';
import AskAssistantModal from './AskAssistantModal';

const Dashboard = () => {
  const { language, user } = useSelector(state => state.auth);
  const { activities, reminders } = useSelector(state => state.activities);
  const [showLogModal, setShowLogModal] = useState(false);
  const [showPestModal, setShowPestModal] = useState(false);
  const [showAskModal, setShowAskModal] = useState(false);
  const [activeTab, setActiveTab] = useState('overview');

  const getText = (english, malayalam, hindi) => {
    if (language === 'malayalam') return malayalam;
    if (language === 'hindi') return hindi;
    return english;
  };

  // Sample data for demonstration
  const weatherData = {
    temperature: 28,
    humidity: 75,
    rainfall: '2 mm',
    forecast: getText('Rain likely today', '‡¥á‡¥®‡µç‡¥®‡µç ‡¥Æ‡¥¥‡¥Ø‡µÅ‡¥£‡µç‡¥ü‡¥æ‡¥ï‡¥æ‡¥Ç', '‡§Ü‡§ú ‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•Ä ‡§∏‡§Ç‡§≠‡§æ‡§µ‡§®‡§æ')
  };

  const marketPrices = [
    { crop: 'Rice', price: '‚Çπ42/kg', trend: 'up' },
    { crop: 'Coconut', price: '‚Çπ35/piece', trend: 'stable' },
    { crop: 'Banana', price: '‚Çπ28/kg', trend: 'down' }
  ];

  const governmentSchemes = [
    { 
      title: getText('Crop Insurance Scheme', '‡¥ï‡µÉ‡¥∑‡¥ø ‡¥≠‡µÄ‡¥Æ‡¥æ ‡¥™‡¥¶‡µç‡¥ß‡¥§‡¥ø', '‡§´‡§∏‡§≤ ‡§¨‡•Ä‡§Æ‡§æ ‡§Ø‡•ã‡§ú‡§®‡§æ'), 
      deadline: '2024-02-15',
      status: 'active'
    },
    { 
      title: getText('Soil Health Card', '‡¥Æ‡¥£‡µç‡¥£‡µç ‡¥Ü‡¥∞‡µã‡¥ó‡µç‡¥Ø ‡¥ï‡¥æ‡µº‡¥°‡µç', '‡§Æ‡•É‡§¶‡§æ ‡§∏‡•ç‡§µ‡§æ‡§∏‡•ç‡§•‡•ç‡§Ø ‡§ï‡§æ‡§∞‡•ç‡§°'), 
      deadline: '2024-03-01',
      status: 'upcoming'
    }
  ];

  const quickActions = [
    { 
      icon: 'üé§', 
      label: getText('Ask Assistant', '‡¥ö‡µã‡¥¶‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï', '‡§∏‡§π‡§æ‡§Ø‡§ï ‡§∏‡•á ‡§™‡•Ç‡§õ‡•á‡§Ç'), 
      color: 'blue',
      action: () => setShowAskModal(true)
    },
    { 
      icon: '‚úçÔ∏è', 
      label: getText('Log Activity', '‡¥™‡µç‡¥∞‡¥µ‡µÉ‡¥§‡µç‡¥§‡¥ø ‡¥∞‡µá‡¥ñ‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡µÅ‡¥ï', '‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç'), 
      color: 'green',
      action: () => setShowLogModal(true)
    },
    { 
      icon: 'üì∏', 
      label: getText('Report Pest', '‡¥ï‡µÄ‡¥ü‡¥Ç ‡¥±‡¥ø‡¥™‡µç‡¥™‡µã‡µº‡¥ü‡µç‡¥ü‡µç', '‡§ï‡•Ä‡§ü ‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü ‡§ï‡§∞‡•á‡§Ç'), 
      color: 'red',
      action: () => setShowPestModal(true)
    },
    { 
      icon: 'üìÖ', 
      label: getText('Reminders', '‡¥ì‡µº‡¥Æ‡µç‡¥Æ‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡¥≤‡µÅ‡¥ï‡µæ', '‡§Ö‡§®‡•Å‡§∏‡•ç‡§Æ‡§æ‡§∞‡§ï'), 
      color: 'orange',
      action: () => setActiveTab('reminders')
    }
  ];

  const tabs = [
    { id: 'overview', label: getText('Overview', '‡¥Ö‡¥µ‡¥≤‡µã‡¥ï‡¥®‡¥Ç', '‡§Ö‡§µ‡§≤‡•ã‡§ï‡§®') },
    { id: 'activities', label: getText('Activities', '‡¥™‡µç‡¥∞‡¥µ‡µÉ‡¥§‡µç‡¥§‡¥ø‡¥ï‡µæ', '‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§Ø‡§æ‡§Å') },
    { id: 'reminders', label: getText('Reminders', '‡¥ì‡µº‡¥Æ‡µç‡¥Æ‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡¥≤‡µÅ‡¥ï‡µæ', '‡§Ö‡§®‡•Å‡§∏‡•ç‡§Æ‡§æ‡§∞‡§ï') },
    { id: 'reports', label: getText('Reports', '‡¥±‡¥ø‡¥™‡µç‡¥™‡µã‡µº‡¥ü‡µç‡¥ü‡µÅ‡¥ï‡µæ', '‡§∞‡§ø‡§™‡•ã‡§∞‡•ç‡§ü‡•ç‡§∏') }
  ];

  const farmingTips = [
    getText('Plan sowing according to rainfall patterns', 
            '‡¥Æ‡¥¥‡¥ï‡µç‡¥ï‡¥æ‡¥≤‡¥§‡µç‡¥§‡µç ‡¥µ‡¥ø‡¥§‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µΩ ‡¥∂‡µç‡¥∞‡¥¶‡µç‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï', 
            '‡§¨‡§æ‡§∞‡§ø‡§∂ ‡§ï‡•á ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§ï‡•á ‡§Ö‡§®‡•Å‡§∏‡§æ‡§∞ ‡§¨‡•Å‡§Ü‡§à ‡§ï‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§¨‡§®‡§æ‡§è‡§Ç'),
    getText('Regular soil testing is important', 
            '‡¥Æ‡¥£‡µç‡¥£‡µç ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥® ‡¥ì‡µº‡¥ï‡µç‡¥ï‡µÅ‡¥ï', 
            '‡§®‡§ø‡§Ø‡§Æ‡§ø‡§§ ‡§Æ‡§ø‡§ü‡•ç‡§ü‡•Ä ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§£ ‡§Æ‡§π‡§§‡•ç‡§µ‡§™‡•Ç‡§∞‡•ç‡§£ ‡§π‡•à')
  ];

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Welcome Banner */}
      <div className="bg-gradient-to-r from-green-600 to-green-700 text-white py-6">
        <div className="container mx-auto px-4">
          <div className="flex flex-col md:flex-row justify-between items-center">
            <div>
              <h1 className="text-2xl font-bold">
                {getText('Welcome', '‡¥∏‡µç‡¥µ‡¥æ‡¥ó‡¥§‡¥Ç', '‡§∏‡•ç‡§µ‡§æ‡§ó‡§§')}, {user?.name}!
              </h1>
              <p className="text-green-200">
                {getText('We are here to assist you in your farming journey', 
                        '‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥Ø‡¥æ‡¥§‡µç‡¥∞‡¥Ø‡¥ø‡µΩ ‡¥∏‡¥π‡¥æ‡¥Ø‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥û‡¥ô‡µç‡¥ô‡µæ ‡¥á‡¥µ‡¥ø‡¥ü‡µÜ‡¥Ø‡µÅ‡¥£‡µç‡¥ü‡µç', 
                        '‡§π‡§Æ ‡§Ü‡§™‡§ï‡•Ä ‡§ñ‡•á‡§§‡•Ä ‡§ï‡•Ä ‡§Ø‡§æ‡§§‡•ç‡§∞‡§æ ‡§Æ‡•á‡§Ç ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Ç ‡§π‡•à‡§Ç')}
              </p>
            </div>
            <div className="bg-white bg-opacity-20 rounded-lg p-3 mt-4 md:mt-0">
              <div className="text-center">
                <div className="text-2xl font-bold">{weatherData.temperature}¬∞C</div>
                <div className="text-sm">{weatherData.forecast}</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-4 py-6">
        {/* Navigation Tabs */}
        <div className="bg-white rounded-lg shadow-sm mb-6">
          <div className="flex overflow-x-auto">
            {tabs.map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`flex-1 min-w-0 px-4 py-3 text-center font-medium transition-colors ${
                  activeTab === tab.id
                    ? 'text-green-600 border-b-2 border-green-600'
                    : 'text-gray-600 hover:text-green-500'
                }`}
              >
                {tab.label}
              </button>
            ))}
          </div>
        </div>

        {/* Quick Actions */}
        <div className="grid grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
          {quickActions.map((action, index) => (
            <button
              key={index}
              onClick={action.action}
              className={`bg-white p-4 rounded-lg shadow-md hover:shadow-lg transition-all duration-200 text-center transform hover:scale-105 ${
                action.color === 'green' ? 'border-l-4 border-green-500' :
                action.color === 'blue' ? 'border-l-4 border-blue-500' :
                action.color === 'red' ? 'border-l-4 border-red-500' : 'border-l-4 border-orange-500'
              }`}
            >
              <div className="text-3xl mb-2">{action.icon}</div>
              <div className="font-bold text-gray-700 text-sm">{action.label}</div>
            </button>
          ))}
        </div>

        {/* Main Content Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Left Column - Main Content */}
          <div className="lg:col-span-2 space-y-6">
            {/* Advisory Card */}
            <AdvisoryCard />

            {/* Tab Content */}
            {activeTab === 'overview' && (
              <div className="space-y-6">
                {/* Weather Card */}
                <div className="bg-white rounded-lg shadow-md p-6">
                  <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                    üå§Ô∏è {getText('Weather', '‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•', '‡§Æ‡•å‡§∏‡§Æ')}
                  </h3>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                    <div className="text-center p-3 bg-blue-50 rounded-lg">
                      <div className="text-2xl font-bold text-blue-600">{weatherData.temperature}¬∞C</div>
                      <div className="text-sm text-gray-600">{getText('Temperature', '‡¥§‡¥æ‡¥™‡¥®‡¥ø‡¥≤', '‡§§‡§æ‡§™‡§Æ‡§æ‡§®')}</div>
                    </div>
                    <div className="text-center p-3 bg-green-50 rounded-lg">
                      <div className="text-2xl font-bold text-green-600">{weatherData.humidity}%</div>
                      <div className="text-sm text-gray-600">{getText('Humidity', '‡¥Ü‡µº‡¥¶‡µç‡¥∞‡¥§', '‡§®‡§Æ‡•Ä')}</div>
                    </div>
                    <div className="text-center p-3 bg-purple-50 rounded-lg">
                      <div className="text-2xl font-bold text-purple-600">{weatherData.rainfall}</div>
                      <div className="text-sm text-gray-600">{getText('Rainfall', '‡¥Æ‡¥¥', '‡§µ‡§∞‡•ç‡§∑‡§æ')}</div>
                    </div>
                    <div className="text-center p-3 bg-orange-50 rounded-lg">
                      <div className="text-sm font-bold text-orange-600">{weatherData.forecast}</div>
                      <div className="text-sm text-gray-600">{getText('Forecast', '‡¥™‡µç‡¥∞‡¥µ‡¥ö‡¥®‡¥Ç', '‡§™‡•Ç‡§∞‡•ç‡§µ‡§æ‡§®‡•Å‡§Æ‡§æ‡§®')}</div>
                    </div>
                  </div>
                </div>

                {/* Market Prices */}
                <div className="bg-white rounded-lg shadow-md p-6">
                  <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                    üìä {getText('Market Prices', '‡¥µ‡¥ø‡¥™‡¥£‡¥ø ‡¥µ‡¥ø‡¥≤‡¥ï‡µæ', '‡§¨‡§æ‡§ú‡§æ‡§∞ ‡§Æ‡•Ç‡§≤‡•ç‡§Ø')}
                  </h3>
                  <div className="space-y-3">
                    {marketPrices.map((item, index) => (
                      <div key={index} className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">
                        <span className="font-medium">{item.crop}</span>
                        <span className="font-bold">{item.price}</span>
                        <span className={`px-2 py-1 rounded text-xs ${
                          item.trend === 'up' ? 'bg-green-100 text-green-800' :
                          item.trend === 'down' ? 'bg-red-100 text-red-800' : 'bg-gray-100 text-gray-800'
                        }`}>
                          {item.trend === 'up' ? '‚Üë' : item.trend === 'down' ? '‚Üì' : '‚Üí'}
                        </span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {activeTab === 'activities' && (
              <div className="bg-white rounded-lg shadow-md p-6">
                <div className="flex justify-between items-center mb-4">
                  <h3 className="text-lg font-bold text-gray-800">
                    {getText('All Activities', '‡¥é‡¥≤‡µç‡¥≤‡¥æ ‡¥™‡µç‡¥∞‡¥µ‡µÉ‡¥§‡µç‡¥§‡¥ø‡¥ï‡¥≥‡µÅ‡¥Ç', '‡§∏‡§≠‡•Ä ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø‡§Ø‡§æ‡§Å')}
                  </h3>
                  <button 
                    onClick={() => setShowLogModal(true)}
                    className="bg-green-600 text-white px-4 py-2 rounded-lg text-sm font-bold hover:bg-green-700 transition"
                  >
                    + {getText('New Activity', '‡¥™‡µÅ‡¥§‡¥ø‡¥Ø ‡¥™‡µç‡¥∞‡¥µ‡µÉ‡¥§‡µç‡¥§‡¥ø', '‡§®‡§à ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø')}
                  </button>
                </div>
                <div className="space-y-3">
                  {activities.length > 0 ? (
                    activities.map(activity => (
                      <ActivityCard key={activity.id} activity={activity} />
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      {getText('No activities recorded yet', 
                              '‡¥á‡¥§‡µÅ‡¥µ‡¥∞‡µÜ ‡¥™‡µç‡¥∞‡¥µ‡µÉ‡¥§‡µç‡¥§‡¥ø‡¥ï‡µæ ‡¥∞‡µá‡¥ñ‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡¥ø‡¥Ø‡¥ø‡¥ü‡µç‡¥ü‡¥ø‡¥≤‡µç‡¥≤', 
                              '‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø ‡§¶‡§∞‡•ç‡§ú ‡§®‡§π‡•Ä‡§Ç ‡§ï‡•Ä ‡§ó‡§à')}
                    </div>
                  )}
                </div>
              </div>
            )}

            {activeTab === 'reminders' && (
              <div className="bg-white rounded-lg shadow-md p-6">
                <h3 className="text-lg font-bold text-gray-800 mb-4">
                  üîî {getText('Reminders', '‡¥ì‡µº‡¥Æ‡µç‡¥Æ‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡¥≤‡µÅ‡¥ï‡µæ', '‡§Ö‡§®‡•Å‡§∏‡•ç‡§Æ‡§æ‡§∞‡§ï')}
                </h3>
                <div className="space-y-3">
                  {reminders.length > 0 ? (
                    reminders.map(reminder => (
                      <div key={reminder.id} className="flex items-center justify-between p-3 bg-yellow-50 border-l-4 border-yellow-500 rounded-lg">
                        <div>
                          <div className="font-medium">{reminder.title}</div>
                          <div className="text-sm text-gray-600">
                            {getText('Due', '‡¥Ö‡¥µ‡¥∏‡¥æ‡¥® ‡¥§‡µÄ‡¥Ø‡¥§‡¥ø', '‡§®‡§ø‡§Ø‡§§ ‡§§‡§æ‡§∞‡•Ä‡§ñ')}: {reminder.date}
                          </div>
                        </div>
                        <button className="bg-green-600 text-white px-3 py-1 rounded text-sm">
                          {getText('Mark Done', '‡¥™‡µÇ‡µº‡¥§‡µç‡¥§‡¥ø‡¥Ø‡¥æ‡¥ï‡µç‡¥ï‡¥ø', '‡§™‡•Ç‡§∞‡•ç‡§£ ‡§ö‡§ø‡§π‡•ç‡§®‡§ø‡§§ ‡§ï‡§∞‡•á‡§Ç')}
                        </button>
                      </div>
                    ))
                  ) : (
                    <div className="text-center py-8 text-gray-500">
                      {getText('No reminders at the moment', 
                              '‡¥á‡¥™‡µç‡¥™‡µã‡µæ ‡¥ì‡µº‡¥Æ‡µç‡¥Æ‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡¥≤‡µÅ‡¥ï‡µæ ‡¥á‡¥≤‡µç‡¥≤', 
                              '‡§´‡§ø‡§≤‡§π‡§æ‡§≤ ‡§ï‡•ã‡§à ‡§Ö‡§®‡•Å‡§∏‡•ç‡§Æ‡§æ‡§∞‡§ï ‡§®‡§π‡•Ä‡§Ç')}
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>

          {/* Right Column - Sidebar */}
          <div className="space-y-6">
            {/* Government Schemes */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                üèõÔ∏è {getText('Government Schemes', '‡¥∏‡µº‡¥ï‡µç‡¥ï‡¥æ‡µº ‡¥™‡¥¶‡µç‡¥ß‡¥§‡¥ø‡¥ï‡µæ', '‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§Ø‡•ã‡§ú‡§®‡§æ‡§è‡§Ç')}
              </h3>
              <div className="space-y-3">
                {governmentSchemes.map((scheme, index) => (
                  <div key={index} className="p-3 border rounded-lg">
                    <div className="font-medium text-sm">{scheme.title}</div>
                    <div className="text-xs text-gray-600 mt-1">
                      {getText('Deadline', '‡¥Ö‡¥µ‡¥∏‡¥æ‡¥® ‡¥§‡µÄ‡¥Ø‡¥§‡¥ø', '‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§§‡§ø‡§•‡§ø')}: {scheme.deadline}
                    </div>
                    <span className={`inline-block mt-2 px-2 py-1 rounded text-xs ${
                      scheme.status === 'active' ? 'bg-green-100 text-green-800' : 'bg-blue-100 text-blue-800'
                    }`}>
                      {scheme.status === 'active' 
                        ? getText('Active', '‡¥∏‡¥ú‡µÄ‡¥µ‡¥Ç', '‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø') 
                        : getText('Upcoming', '‡¥µ‡¥∞‡µÅ‡¥®‡µç‡¥®', '‡§Ü‡§ó‡§æ‡§Æ‡•Ä')}
                    </span>
                  </div>
                ))}
              </div>
            </div>

            {/* Quick Tips */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                üí° {getText('Farming Tips', '‡¥ï‡µÉ‡¥∑‡¥ø ‡¥®‡µÅ‡¥±‡µÅ‡¥ô‡µç‡¥ô‡µÅ‡¥ï‡µæ', '‡§ï‡•É‡§∑‡§ø ‡§Ø‡•Å‡§ï‡•ç‡§§‡§ø‡§Ø‡§æ‡§Å')}
              </h3>
              <div className="space-y-3">
                {farmingTips.map((tip, index) => (
                  <div key={index} className="p-3 bg-green-50 rounded-lg">
                    <div className="font-medium text-sm">{tip}</div>
                  </div>
                ))}
              </div>
            </div>

            {/* Farm Summary */}
            <div className="bg-white rounded-lg shadow-md p-6">
              <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center">
                üåæ {getText('Farm Summary', '‡¥´‡¥æ‡¥Ç ‡¥∏‡¥Ç‡¥ó‡µç‡¥∞‡¥π‡¥Ç', '‡§ñ‡•á‡§§ ‡§∏‡§æ‡§∞‡§æ‡§Ç‡§∂')}
              </h3>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span>{getText('Primary Crop', '‡¥™‡µç‡¥∞‡¥ß‡¥æ‡¥® ‡¥µ‡¥ø‡¥≥', '‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§´‡§∏‡§≤')}:</span>
                  <span className="font-medium">{user?.primaryCrop || 'Rice'}</span>
                </div>
                <div className="flex justify-between">
                  <span>{getText('Land Area', '‡¥®‡¥ø‡¥≤‡¥Ç ‡¥µ‡¥ø‡¥∏‡µç‡¥§‡µÄ‡µº‡¥£‡µç‡¥£‡¥Ç', '‡§ú‡§Æ‡•Ä‡§® ‡§ï‡§æ ‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞‡§´‡§≤')}:</span>
                  <span className="font-medium">{user?.landArea || '2 acres'}</span>
                </div>
                <div className="flex justify-between">
                  <span>{getText('Location', '‡¥∏‡µç‡¥•‡¥≤‡¥Ç', '‡§∏‡•ç‡§•‡§æ‡§®')}:</span>
                  <span className="font-medium">{user?.location || 'Thrissur'}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Modals */}
      {showLogModal && <LogActivityModal onClose={() => setShowLogModal(false)} />}
      {showPestModal && <PestReportModal onClose={() => setShowPestModal(false)} />}
      {showAskModal && <AskAssistantModal onClose={() => setShowAskModal(false)} />}
    </div>
  );
};

export default Dashboard;