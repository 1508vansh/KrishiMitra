import React, { useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { addActivity } from '../store/store';

const LogActivityModal = ({ onClose }) => {
  const dispatch = useDispatch();
  const { language } = useSelector(state => state.auth);
  const [activity, setActivity] = useState({
    type: 'sowing',
    crop: '',
    date: new Date().toISOString().split('T')[0],
    notes: '',
    photo: null
  });

  const getText = (english, malayalam, hindi) => {
    if (language === 'malayalam') return malayalam;
    if (language === 'hindi') return hindi;
    return english;
  };

  const activityTypes = [
    { value: 'sowing', label: getText('Sowing', '‡¥µ‡¥ø‡¥§‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µΩ', '‡§¨‡•Å‡§Ü‡§à'), icon: 'üå±' },
    { value: 'irrigation', label: getText('Irrigation', '‡¥®‡µÄ‡¥∞‡µä‡¥¥‡µÅ‡¥ï‡µç‡¥ï‡µç', '‡§∏‡§ø‡§Ç‡§ö‡§æ‡§à'), icon: 'üíß' },
    { value: 'fertilizer', label: getText('Fertilizer', '‡¥µ‡¥≥‡¥Ç', '‡§â‡§∞‡•ç‡§µ‡§∞‡§ï'), icon: 'üß™' },
    { value: 'pesticide', label: getText('Pesticide', '‡¥™‡µÜ‡¥∏‡µç‡¥±‡µç‡¥±‡¥ø‡¥∏‡µà‡¥°‡µç', '‡§ï‡•Ä‡§ü‡§®‡§æ‡§∂‡§ï'), icon: 'üêõ' },
    { value: 'harvesting', label: getText('Harvesting', '‡¥µ‡¥ø‡¥≥‡¥µ‡µÜ‡¥ü‡µÅ‡¥™‡µç‡¥™‡µç', '‡§ï‡§ü‡§æ‡§à'), icon: 'üåæ' },
    { value: 'pest_sighting', label: getText('Pest Sighting', '‡¥ï‡µÄ‡¥ü‡¥Ç ‡¥ï‡¥£‡µç‡¥ü‡¥§‡µç', '‡§ï‡•Ä‡§ü ‡§¶‡§∞‡•ç‡§∂‡§®'), icon: '‚ö†Ô∏è' }
  ];

  const handleSubmit = (e) => {
    e.preventDefault();
    dispatch(addActivity(activity));
    onClose();
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-2 sm:p-4 z-50">
      <div className="bg-white rounded-lg shadow-xl w-full max-w-md max-h-[90vh] overflow-y-auto">
        <div className="bg-green-600 text-white p-3 sm:p-4 rounded-t-lg sticky top-0">
          <h2 className="text-lg sm:text-xl font-bold">
            {getText('Log Activity', '‡¥™‡µç‡¥∞‡¥µ‡µÉ‡¥§‡µç‡¥§‡¥ø ‡¥∞‡µá‡¥ñ‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡µÅ‡¥ï', '‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç')}
          </h2>
        </div>
        
        <form onSubmit={handleSubmit} className="p-3 sm:p-4 space-y-3 sm:space-y-4">
          {/* Activity Type */}
          <div>
            <label className="block text-sm font-bold text-gray-700 mb-1 sm:mb-2">
              {getText('Activity Type', '‡¥™‡µç‡¥∞‡¥µ‡µÉ‡¥§‡µç‡¥§‡¥ø ‡¥§‡¥∞‡¥Ç', '‡§ó‡§§‡§ø‡§µ‡§ø‡§ß‡§ø ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞')}
            </label>
            <select
              value={activity.type}
              onChange={(e) => setActivity({...activity, type: e.target.value})}
              className="w-full p-2 sm:p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 text-sm sm:text-base"
            >
              {activityTypes.map(type => (
                <option key={type.value} value={type.value}>
                  {type.icon} {type.label}
                </option>
              ))}
            </select>
          </div>

          {/* Crop */}
          <div>
            <label className="block text-sm font-bold text-gray-700 mb-1 sm:mb-2">
              {getText('Crop', '‡¥µ‡¥ø‡¥≥', '‡§´‡§∏‡§≤')}
            </label>
            <input
              type="text"
              value={activity.crop}
              onChange={(e) => setActivity({...activity, crop: e.target.value})}
              className="w-full p-2 sm:p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 text-sm sm:text-base"
              placeholder={getText('Crop name', '‡¥µ‡¥ø‡¥≥‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥™‡µá‡¥∞‡µç', '‡§´‡§∏‡§≤ ‡§ï‡§æ ‡§®‡§æ‡§Æ')}
            />
          </div>

          {/* Date */}
          <div>
            <label className="block text-sm font-bold text-gray-700 mb-1 sm:mb-2">
              {getText('Date', '‡¥§‡µÄ‡¥Ø‡¥§‡¥ø', '‡§§‡§æ‡§∞‡•Ä‡§ñ')}
            </label>
            <input
              type="date"
              value={activity.date}
              onChange={(e) => setActivity({...activity, date: e.target.value})}
              className="w-full p-2 sm:p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 text-sm sm:text-base"
            />
          </div>

          {/* Notes */}
          <div>
            <label className="block text-sm font-bold text-gray-700 mb-1 sm:mb-2">
              {getText('Notes', '‡¥ï‡µÅ‡¥±‡¥ø‡¥™‡µç‡¥™‡µÅ‡¥ï‡µæ', '‡§ü‡§ø‡§™‡•ç‡§™‡§£‡§ø‡§Ø‡§æ‡§Å')}
            </label>
            <textarea
              value={activity.notes}
              onChange={(e) => setActivity({...activity, notes: e.target.value})}
              rows="3"
              className="w-full p-2 sm:p-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-green-500 text-sm sm:text-base"
              placeholder={getText('Additional details...', '‡¥Ö‡¥ß‡¥ø‡¥ï ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ...', '‡§Ö‡§§‡§ø‡§∞‡§ø‡§ï‡•ç‡§§ ‡§µ‡§ø‡§µ‡§∞‡§£...')}
            />
          </div>

          {/* Buttons */}
          <div className="flex flex-col sm:flex-row space-y-2 sm:space-y-0 sm:space-x-3 pt-3 sm:pt-4">
            <button
              type="button"
              onClick={onClose}
              className="flex-1 bg-gray-300 text-gray-700 py-2 sm:py-3 rounded-lg font-bold hover:bg-gray-400 transition text-sm sm:text-base"
            >
              {getText('Cancel', '‡¥±‡¥¶‡µç‡¥¶‡¥æ‡¥ï‡µç‡¥ï‡µÅ‡¥ï', '‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç')}
            </button>
            <button
              type="submit"
              className="flex-1 bg-green-600 text-white py-2 sm:py-3 rounded-lg font-bold hover:bg-green-700 transition text-sm sm:text-base"
            >
              {getText('Save', '‡¥∏‡µá‡¥µ‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï', '‡§∏‡•á‡§µ ‡§ï‡§∞‡•á‡§Ç')}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default LogActivityModal;